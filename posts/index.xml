<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Articles on Connect your thoughts</title>
        <link>https://www.connectthoughts.com/posts/</link>
        <description>Recent content in Articles on Connect your thoughts</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>&lt;a href=&#34;https://creativecommons.org/licenses/by-nc/4.0/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;CC BY-NC 4.0&lt;/a&gt;</copyright>
        <lastBuildDate>Tue, 04 Jun 2019 21:55:06 +0100</lastBuildDate>
        <atom:link href="https://www.connectthoughts.com/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>Do you need an online presence?</title>
            <link>https://www.connectthoughts.com/posts/2020/09/do-you-need-an-online-presence/</link>
            <pubDate>Thu, 24 Sep 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/09/do-you-need-an-online-presence/</guid>
            <description>Do you need an online presence?</description>
            <content type="html"><![CDATA[<p>Online presence is key, especially now, to showcase your skills and express your thoughts and ideas in form of blogs or articles. Having your own personal website gives you credibility when someone is searching for your name. In this post, I’m going to discuss the benefits of writing on your own website. Writing is one of the easiest ways to get started, as you need only time with no expensive tools. I typically post my writings in social media and my personal site at <a href="https://www.connectthoughts.com/">https://www.connectthoughts.com/.</a> If you’re wondering that you have to spend money or learn new skills like WordPress, I’ve news for you. You can create a simple static site 100% free, which is a lot better, easy, and performant than WordPress. It uses the frameworks like Hugo (static site generator), github, and netlify. Don’t let the names scare you. It’s simple to set it up, and I’ll walk you through step-by-step in my YouTube series at <a href="https://www.youtube.com/watch?v=lTl90CfyNhg&amp;list=PL8x5iLUAOOYptYJqZRDofemCe8Jk5UqPN">https://www.youtube.com/watch?v=lTl90CfyNhg&amp;list=PL8x5iLUAOOYptYJqZRDofemCe8Jk5UqPN</a></p>
<p>I strongly encourage everyone to get started with a personal website and writing. I’ve outlined some benefits here in no particular order. Writing lets you -
• think clearly and organize your ideas
• improve your writing skills by consistently blogging about topics that interest you
• if you write your own article, it also becomes easier to speak and communicate. If you watch any famous author’s interviews on YouTube or online, they’ll say the exact thing outlined in their books. Nothing wrong with it, as it’s their same ideas which they already spent writing.
• connect with like-minded people
• potentially land you a job
• it’s a play area to learn something new without having to worry about what others think
• could take the smaller blogs to make into an eBook or potentially get a book deal if you write quality articles. I’ve seen several people with similar success rising to fame and stardom.
• publish the same article in social media to get more visibility and reach
• make a video course out of the articles and eventually monetize.
• if you get any feedback, you can quickly correct or learn from it
And the list goes on and on. Take action and change yourself to give a brand!</p>
]]></content>
        </item>
        
        <item>
            <title>Do you need online presence?</title>
            <link>https://www.connectthoughts.com/posts/2020/09/do-you-need-online-presence/</link>
            <pubDate>Wed, 23 Sep 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/09/do-you-need-online-presence/</guid>
            <description>Do you need online presence?</description>
            <content type="html"><![CDATA[<p>Online presence is key, especially now, to showcase your skills and express your thoughts and ideas inS form of blogs or articles. Having your own personal website gives you credibility when someone is searching for your name. In this post, I’m going to discuss the benefits of writing on your own website. Writing is one of the easiest ways to get started, as you need only time with no expensive tools. I typically post my writings in social media and my personal site at <a href="https://www.connectthoughts.com/">https://www.connectthoughts.com/.</a> If you’re wondering that you have to spend money or learn new skills like WordPress, I’ve news for you. You can create a simple static site 100% free, which is a lot better, easy, and performant than WordPress. It uses the frameworks like Hugo (static site generator), github, and netlify. Don’t let the names scare you. It’s simple to set it up, and I’ll walk you through step-by-step in my YouTube series at <a href="https://www.youtube.com/watch?v=lTl90CfyNhg&amp;list=PL8x5iLUAOOYptYJqZRDofemCe8Jk5UqPN">https://www.youtube.com/watch?v=lTl90CfyNhg&amp;list=PL8x5iLUAOOYptYJqZRDofemCe8Jk5UqPN</a></p>
<p>I strongly encourage everyone to get started with a personal website and writing. I’ve outlined some benefits here in no particular order. Writing lets you -
• think clearly and organize your ideas
• improve your writing skills by consistently blogging about topics that interest you
• if you write your own article, it also becomes easier to speak and communicate. If you watch any famous author’s interviews on YouTube or online, they’ll say the exact thing outlined in their books. Nothing wrong with it, as it’s their same ideas which they already spent writing.
• connect with like-minded people
• potentially land you a job
• it’s a play area to learn something new without having to worry about what others think
• could take the smaller blogs to make into an eBook or potentially get a book deal if you write quality articles. I’ve seen several people with similar success rising to fame and stardom.
• publish the same article in social media to get more visibility and reach
• make a video course out of the articles and eventually monetize.
• if you get any feedback, you can quickly correct or learn from it
And the list goes on and on. Take action and change yourself to give a brand!</p>
]]></content>
        </item>
        
        <item>
            <title>Career advice for aspiring ethical hackers, pentesters and application testers</title>
            <link>https://www.connectthoughts.com/posts/2020/09/career-advice-for-aspiring-ethical-hackers-pentesters-and-application-testers/</link>
            <pubDate>Sun, 20 Sep 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/09/career-advice-for-aspiring-ethical-hackers-pentesters-and-application-testers/</guid>
            <description>Career advice for aspiring ethical hackers, pentesters and application testers</description>
            <content type="html"><![CDATA[<p>Coming from a pentesting background and having led many Red Team engagements for over 15 years, I’m noticing changing industry trends with respect to vulnerability, red teaming, and other technical assessments.</p>
<p>Until recently, there was a huge demand for technical assessments as organizations were required to test and validate security issues by third-party vendors, as mandated by compliance requirements by PCI, HIPAA, and Sarbanes–Oxley This trend will still continue but not as much as it used to be.</p>
<p>Back in the day, companies were charging a premium for application, network, and wireless pentesters. But the trends are changing now for very good reasons. Why you might ask? Thanks to tools such as Nessus and Qualys. Even people with limited skills can run these tools and make sense of the vulnerabilities. Majority of the findings are related to patching and default configurations. You don’t need to pay a fortune to third party companies to tell you that unless they bring in more value other than what’s in those reports.</p>
<p>In addition to that, many innovative companies like Cymulate and Pcysys are propping up to perform automated red team and breach simulations. Not to mention the machine learning and artificial intelligence based scanning tools that are showing up from everywhere. I’ve not used any of these automated platforms, but it looks interesting and my guess is that similar tools will start to increase over the next few years.</p>
<p>Okay where does it put me and what should I do? Glad you asked. With the hype and career promises, many training schools and independent instructors started Ethical Hacking and other similar courses. The main goals of these trainings are to demonstrate the tools rather than teaching the fundamentals. Who doesn’t like to hack and own the world with a couple of clicks? They make it look so easy, and the TV shows and movies about hacking show no justice to it as well. Only realistic show I can recommend is the Mr. Robot. If you haven’t watched it, check it out. Don’t fall into that trap!</p>
<p>The only way to succeed in this profession is to have true passion, willingness to learn, and put in the effort that is required to learn the skill the right way. My advice is to learn the basics about networking and operating system fundamentals. To be an effective security analyst, you need to understand the underlying operating systems internals, networking concepts, protocols, etc. And learn scripting skills such as Powershell or Python. If you get a deep grounding in the fundamentals, you’ll be able to sustain in this field in the long run and not lose your job to automation, which is a significant threat to many technology fields.</p>
<p>Focus on basics, be passionate, and learn every day is the best advice I would give to be marketable in these trying times. I’ll share some good resource on how to start in my next article.</p>
]]></content>
        </item>
        
        <item>
            <title>Cloud Security Threats</title>
            <link>https://www.connectthoughts.com/posts/2020/07/cloud-security-threats/</link>
            <pubDate>Mon, 20 Jul 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/07/cloud-security-threats/</guid>
            <description>Cloud Security Threats</description>
            <content type="html"><![CDATA[<p><img src="image-20200911134006423.png" alt="image-20200911134006423"></p>
<p><img src="image-20200911134047215.png" alt="image-20200911134047215"></p>
<p><img src="image-20200911134113257.png" alt="image-20200911134113257"></p>
<p><img src="image-20200911134132164.png" alt="image-20200911134132164"></p>
<p><img src="image-20200911134150557.png" alt="image-20200911134150557"></p>
<p><img src="image-20200911134208916.png" alt="image-20200911134208916"></p>
<p><img src="image-20200911134224813.png" alt="image-20200911134224813"></p>
<p><img src="image-20200911134247683.png" alt="image-20200911134247683"></p>
]]></content>
        </item>
        
        <item>
            <title>Web Application Pentest Training</title>
            <link>https://www.connectthoughts.com/posts/2020/07/web-application-pentest-training/</link>
            <pubDate>Sun, 19 Jul 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/07/web-application-pentest-training/</guid>
            <description>Web Application Pentest</description>
            <content type="html"><![CDATA[<p><strong>Web Application Hacking - Training</strong></p>
<p>This project is not maintained or supported now, but it should still work with the ISO and instructions give below.</p>
<p><strong>Download the ISO.</strong></p>
<p><a href="https://drive.google.com/file/d/0B_GgpShRlRa2WElnQ2VTUmxlRjA/view">https://drive.google.com/file/d/0B_GgpShRlRa2WElnQ2VTUmxlRjA/view</a></p>
<p>Below YouTube playlist will help with setup.</p>
<p><a href="https://www.youtube.com/watch?list=PL8x5iLUAOOYpoE3kAWfhNYqb1Hi6zAFTk&amp;time_continue=1&amp;v=EBaFeuFlqyw&amp;feature=emb_title">https://www.youtube.com/watch?list=PL8x5iLUAOOYpoE3kAWfhNYqb1Hi6zAFTk&amp;time_continue=1&amp;v=EBaFeuFlqyw&amp;feature=emb_title</a></p>
<p>**Training Materials: **</p>
<p><a href="https://www.dropbox.com/s/r46m0eh6fv3k4v8/Web%20Hacking.pdf?dl=0">https://www.dropbox.com/s/r46m0eh6fv3k4v8/Web%20Hacking.pdf?dl=0</a></p>
]]></content>
        </item>
        
        <item>
            <title>Pentest Interview Preparation Sample Questions</title>
            <link>https://www.connectthoughts.com/posts/2020/07/pentest-interview-preparation-sample-questions/</link>
            <pubDate>Sat, 18 Jul 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/07/pentest-interview-preparation-sample-questions/</guid>
            <description>Pentest interview questions</description>
            <content type="html"><![CDATA[<p>Questions below showcases fictional use cases. Please use you own experience and stories while preparing for an interview.</p>
<p><strong>Why you chose to get into Pen Testing</strong></p>
<p>As an individual, I like to constantly learn new things. With penetration testing, I have always liked the idea of playing a vital role in identifying potential breakpoints across the applications and infrastructure and explore new ways to secure the environment.</p>
<p>As the ecosystem is dynamic, and new technologies have been emerging, it helps me to maintain enough adrenaline rush, to resolve interesting industry challenges – securing environments across industries.</p>
<p><strong>Your biggest Pen Testing challenge that you have faced?</strong></p>
<p>There have been multiple challenging situations which I have faced, but one of the most intriguing challenge has been for an engagement, wherein our role was to assess the security of a unified application and its associated infrastructure for one of the Airport Operations Control Center (APOC).</p>
<p>As the application had been hosted on a public cloud platform, we had multiple limitations on going all way for security testing the application and associated infrastructure. As the application was not hosted on a dedicate tenant in the cloud, we had to take numerous precautions to make sure our activity and POCs didn’t impact other tenant’s (and was within the testing criteria defined by the public provider).</p>
<p>Though, during the testing, we had identified multiple vulnerabilities across the cloud services which impacted our client and also other associated tenant’s. Now, the key challenge was to ensure, we didn’t breach our client’s agreement with the public cloud provider and also not to face a situation wherein we could be held responsible to access other tenant’s data, which as per the cloud provider’s security policy, they were required to inform other tenant.</p>
<p>Through this engagement, we got multiple opportunities to redefine our TVM frameworks and methodology to align and safeguard our team for such situations.</p>
<p><strong>STAR (Situation, Task, Action, Result) story</strong></p>
<p><strong>Situation:</strong> We were engaged to perform a security architecture and technical assessment of an application hosted on the public cloud.</p>
<p><strong>Task:</strong></p>
<ol>
<li>We analyze the attack surfaces and threats corresponding to:</li>
</ol>
<ul>
<li>application design and architecture</li>
<li>Internal and External cloud interfaces</li>
<li>trust relationships across application/network</li>
<li>technology related processes supporting the application</li>
</ul>
<ol>
<li>We defined a customized framework for the assessment and conducted the cloud security architecture review</li>
</ol>
<p><strong>Action:</strong></p>
<p>We familiarized the client with our proven cloud security delivery frameworks and tactical approach, which helped the client gain a better understanding, and develop appropriate mitigation plans for risks associated with cloud platforms across multiple service and deployment models.</p>
<p>We also got involved to lead the cloud security design and got involved during the implementation and testing of various elements of the digital platform including delivering on the operational and go-live phases of the program. We were able to review the deployment architecture on cloud and validated the security of the application deployed on the cloud.</p>
<p><strong>Result:</strong></p>
<ul>
<li>Client awarded another project associated with Cloud Security wherein we assisted the client to migrate critical servers to the cloud.</li>
<li>The client got increased visibility into enterprise use and risks of cloud services.</li>
<li>Increased capability to protect data in cloud services, based on potential risk exposure</li>
<li>Helped set standards and expectations with the client and influence the security testing and validation strategies</li>
<li>Provided an integrated global approach to cloud – design by security with an enterprise view to the development squad</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>RedTeam</title>
            <link>https://www.connectthoughts.com/posts/2020/07/redteam/</link>
            <pubDate>Fri, 17 Jul 2020 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2020/07/redteam/</guid>
            <description>redteam</description>
            <content type="html"><![CDATA[<h1 id="understanding-red-team-assessments">Understanding Red Team Assessments</h1>
<h1 id="red-team-objectives">Red Team Objectives</h1>
<!-- raw HTML omitted -->
<p>Red Teams, unlike run of the mill compliance penetration tests, focus on achieving goals and generating a “big picture” of the state of an organization. The Red Team follows the path an attacker would reasonably take to achieve such goals, rather than looking at assets individually. This follows an attack path based on organic exploitation, in which an attacker will use any means at their disposal as they progress through an organization. Systems normally not considered high value, such as conference rooms and IoT devices, are significant in their ability to provide persistence and enable pivoting into segments, and windows domain exploitation takes shape as accounts are not only enumerated, but evaluated to determine juicy targets.</p>
<p>The key objective of the exercise would be to simulate real threats designed to leverage weaknesses in people, process and technology to compromise the target environment. This would typically include the following areas:</p>
<ul>
<li>Intelligence gathering and reconnaissance</li>
<li>Social engineering, including phishing techniques, use of safe malware infected IOT devices, and physical penetration testing</li>
<li>Wireless and network penetration testing of internal and external systems</li>
<li>Enterprise application assessments to determine whether weaknesses in applications may provide opportunities to gain unauthorized access to information and / or resources</li>
</ul>
<p><img src="redteam.png" alt="redteam"></p>
<p>The ongoing information security breaches at companies worldwide have shown that once perimeter defenses are breached, the company’s crown jewels can be obtained. For organizations, those crown jewels support critical business value chains, and involve, among others, customer and employee data, information, sensitive and restricted data such as IPs, deployment blueprints across automobile sector clients etc.</p>
<p>Red team goal is to simulate a realistic Cyber Attack (both physical and logical) in a controlled manner and provide an evaluation on its defensive and Incident Response capabilities. Examples of such actions include “exfiltration of PII”.</p>
<h1 id="methodology">Methodology</h1>
<p>Using the Tools, Techniques and Process of real-world attackers, red teamers will prepare a targeted attack to deliver sophisticated implant software into Corp’s infrastructure and achieve access to the defined targets.</p>
<p>In addition, confidentiality of the Corp’s data and findings is a top priority, the key rules of engagement which will be defined to include:</p>
<ul>
<li>Approved attack types</li>
<li>Target employees approved and off limits</li>
<li>Reporting processes while attacks are being performed</li>
<li>Approvals required in order to move to the next step when access is achieved</li>
<li>Emergency Contact information</li>
<li>Secure folder where all the data would be stored</li>
</ul>
<p>With this approach towards the penetration testing exercises, organizations can verify that existing and new applications, systems and networks are not vulnerable to security risks that could allow unauthorized access to the company resources. It examines a system’s immunity to actual hacking methodologies and gives an excellent idea of the system’s exploitable vulnerabilities.</p>
<p>Hacking is not a technique but a “thought process”, and hence the importance of conducting a simulated exercise of penetration testing periodically to counter the growing threat to organizational resources.</p>
<h1 id="goals-of-red-team-assessments">Goals of Red Team Assessments</h1>
<h2 id="assets-of-value-or-concern">Assets of Value or Concern</h2>
<p>Assets in this class are valuable, but take some additional effort to create a higher risk scenario, or are not the core of the business.</p>
<h2 id="game-over-situations">“Game Over” Situations</h2>
<p>Goals achieved with this classification or assets taken are automatic critical situations for the client. This includes Domain / Enterprise Administrator on windows networks, control of core business operations, or whatever the client considers a critical asset.</p>
<h2 id="end-game">End Game</h2>
<p>There are several routes attackers can take to get to an End Game scenario, in which the worst possible damage has been done for the determined goals. However, determining when to call that end game has been reached is debatable based on client specifics. For example, some clients only want to see it done then take the time to rearchitect their environment, and others want to see as many ways to achieve this status as possible. In the event that the client chooses the latter, the decision must be made on whether or not the client wants to “take the hit” and convert the red team into a more whitebox approach. Since the attackers already have knowledge of how the network works, and have already compromised assets, this would mean leaving access to these assets open such that the assessment team can look at other issues that may not have been previously identified, or other routes to achieve the level of access.</p>
<p>Each phase will represent a unique set of objectives for Acme Corp&rsquo;s security team and we will evaluate the organization on each of these objectives. We find each phase to be highly valuable for Acme Corp, as the business and technical stakeholders will learn more on the mindset of an attacker and more importantly how to prepare, detect and respond to such an attack.</p>
]]></content>
        </item>
        
        <item>
            <title>CRYPTOSYSTEM LIBRARY FOR WEB APPLICATIONS</title>
            <link>https://www.connectthoughts.com/posts/2015/08/cryptosystem-library-for-web-applications/</link>
            <pubDate>Mon, 17 Aug 2015 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2015/08/cryptosystem-library-for-web-applications/</guid>
            <description>Cryptosystem Web Applications</description>
            <content type="html"><![CDATA[<p>This document discusses the approach or methodology for the cryptosystem library that could be utilised by web applications, web services, REST based web service, file transfer for encryption and decryption. This proposed cryptosystem offers the following built-in features:</p>
<p>·     Authentication – Using this cryptosystem, the identity of the remote system or application can be established. For example, SSL certificate of a web server providing proof of the identity of the remote system.</p>
<p>·     Non-repudiation – This concept implies that the receiver cannot deny his actions. The digital signature in cryptography ensures non-repudiation. For example, in a transaction based application a user could deny performing a transaction and demands a refund. Using digital signature, non-repudiation can be ensured.</p>
<p>·     Confidentiality – This is the key function of the proposed cryptosystem. The data or information passed through this cryptosystem is ensured to be private and assure that only users or application who have access to the appropriate key will get access to the data.</p>
<p>·     Integrity - This feature prevents the unauthorized modification of the data in transit or at rest. The cryptosystem must use a industry recommended hashing algorithm to provide integrity service.</p>
<p><strong>Cryptosystem</strong></p>
<p>A Cryptosystem refers to a library that provides both encryption and decryption functionality. The key generation is left out to the individual system or application that is using this cryptosystem. This is mainly due to the ease of use for key management, provide better security and flexibility to use this cryptosystem. The security of the key completely relies on the system or application that is using the cryptosystem. The best practices and approaches to securing a key is discussed below in this document.</p>
<p>The cryptosystem performs the basic function as below:</p>
<p><img src="clip_image002.png" alt="Screen%20Shot%202016-03-01%20at%203.34.39%20PM.png"></p>
<p>The cryptosystem would accept the plaintext in a particular format, perform cryptographic operations along with Key on the plaintext and outputs a ciphertext. This process is called Encryption. The reverse process to convert ciphertext to plaintext is called Decryption. The above cryptosystem displays a symmetric cryptosystem that uses same key for encryption and decryption. The characteristics of strong symmetric consists of:</p>
<p>·     Key sizes of 128 bits for most applications</p>
<p>·     Key sized of 168 or 256 bits for critical applications such as large financial transactions</p>
<p><strong>Web Service with cryptosystem</strong></p>
<p>The below diagram illustrates the flow of cryptosystem when web service want to utilize the functions. The input to the cryptosystem is the web service call attached to a key over HTTPS. The web service call goes through the cryptosystem functions and outputs a encrypted token to access web service. This token is appended for each web service call and would be verified at the consumer end on the server side. If the token mismatches, the web service call is rejected.</p>
<p><img src="clip_image004.png" alt="Screen%20Shot%202016-03-01%20at%203.50.03%20PM.png"></p>
<p>At the consumer end, the same key will be used to decrypt and validate the web service call. This flow offers below features:</p>
<ol>
<li>
<p>Confidentiality – Only key at the sender and receiver end could decrypt the web service call</p>
</li>
<li>
<p>Non-repudiation – The cryptosystem digitally signs each web service call</p>
</li>
<li>
<p>Integrity – The token value detects if message has been tampered or not</p>
</li>
</ol>
<p><img src="clip_image006.png" alt="Screen%20Shot%202016-03-01%20at%203.57.56%20PM.png"></p>
<p><strong>Key Storage</strong></p>
<p>As discussed earlier, cryptosystem relies on keys to assure a system identity, provide confidentiality, integrity and non-repudiation. It is important that the keys are adequately protected. Should a key be compromised, it is no longer be trusted. The key storage should have following characteristics:</p>
<p>·     Keys should be protected as much as is possible with file system permissions. They should be read only and only the application or system directly accessing them should have these rights.</p>
<p>·     Host based intrusion systems should be deployed to monitor access of keys.</p>
<p>·     Passphrases should be used to protect the keys</p>
<p>·     Storage of keys within source code or binaries should be avoided</p>
<p>·     Minimize the functionality of the system and application requiring access to the key</p>
]]></content>
        </item>
        
        <item>
            <title>APPLICATION INTEGRATION TECHNIQUES</title>
            <link>https://www.connectthoughts.com/posts/2015/07/application-integration-techniques/</link>
            <pubDate>Fri, 17 Jul 2015 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2015/07/application-integration-techniques/</guid>
            <description>Application Integrations with APIs</description>
            <content type="html"><![CDATA[<p>This document discusses each of the application integration methods commonly used these days for B2B integrations. The concepts discussed below focuses on API security from the perspective of confidentiality, integrity, authentication and replay attacks.</p>
<p>-     Technology overview – This section provides the background, overview and advantages of each of the existing technology.</p>
<p>-     Confidentiality - Ensuring the confidentiality of access credentials, authentication credentials, and tokens used for authorization is highly important. The system design and controls implementation must prevent the disclosure of credentials and tokens to any personnel other than the associated user. Maintaining the confidentiality is critically important to meet business objectives.</p>
<p>-     Integrity - Ensuring the integrity of identity information, protecting accounts throughout the information lifecycle and preventing unauthorized modification to ensure a robust identity management system is of critical importance.</p>
<p>-     Authentication – Ensuring authentication methods are understood and implemented correctly to identify the legitimate user to the system. Insufficient authentication methods could lead to unauthorized access to system resources and leakage of sensitive information.</p>
<p>-     Replay attacks – Ensuring application resources cannot be replayed or repeated with already utilized parameters leading to a database overflow or denial of service. This is usually triggered by man-in-the-middle attack.</p>
<p>At a high-level there exist two major types of web services that could be chosen for application to application communication:</p>
<p>-     JAX-RPC based web service – This is based on SOAP protocol. The service provider publishes the web service definition using a WSDL specification and the consumer communicates using a serialized XML message wrapped in a SOAP envelop across the wire.</p>
<p>-     JAX-RS based web service – This is based on Representational State Transfer (REST) web service. The service provider publishes the Resource name that can be used to consume the service and the consumer access the service over stateless HTTP protocol. The message payload can be XML or JSON format.</p>
<p><strong>SOAP (<strong><strong>Simple Object Access Protocol</strong></strong>)</strong></p>
<p>SOAP is a Microsoft developed protocol specification for exchanging structured information in the implementation of web services. It relies exclusively on XML to provide messaging services and has standardized rules for writing the web services. SOAP is usually best suited for distributed enterprise environments where standardization is crucial part in application communication. SOAP being a Microsoft developed protocol has advantages when worked in an enterprise environment.</p>
<ol>
<li>
<p>Standardized structure</p>
</li>
<li>
<p>Built-in error handling</p>
</li>
<li>
<p>Used with both HTTP and SMTP protocol. Secure version of these protocols must be used to achieve high level of security</p>
</li>
<li>
<p>Language, platform, and transport independent</p>
</li>
</ol>
<p>The most important part of SOAP is the Web Services Description Language (WSDL). It provides the definition of how the web service works and the IDE can completely automate the process.</p>
<p><strong>Confidentiality</strong></p>
<p>Confidentiality of the web service communication relies on transport layer security and message level encryption. Using encrypted protocols such as HTTPS/SMTPS protect eavesdropping and man-in-the-middle attacks. All communication with and between web services containing sensitive information, an authenticated session, or transfer of sensitive data must be encrypted using SSL/TLS protocol. Web services communication containing sensitive information such as username, password, token, session identifier must be transmitted over POST request as GET request are cached in communication paths e.g. web browsers, network proxies, etc.</p>
<p>Using XML encryption, the message level confidentiality can be achieved. The OASIS standard specification introduced WS-Security for SOAP messages that enables SOAP message body or portions of it to be encrypted to ensure message confidentiality. Only approved public algorithms must be used such as AES, RSA public key cryptography, and SHA-256 or better. Do not use weak algorithms such as MD5 or SHA1.</p>
<p><strong>Integrity</strong></p>
<p>Web services integrity applies to data at rest as well as data in transit and is protected by TLS layer and XML digital signatures. To ensure data integrity, digital signatures can be used to provide message integrity using the sender&rsquo;s private key. This signature can be validated by the recipient using the sender’s digital certificate (public key). Generally, the digital signature service is provided by the same vendor who provides digital certificates for transport layer security.</p>
<p>Using XML digital signatures, the message level integrity can be achieved. WS-Security uses XML digital signature that enables SOAP messages to be digitally signed to ensure message integrity. The message signature is computed based on the content of the message and is attached to the message. If the message is altered over the transport layer the computed signature becomes invalid and the message is ignored. Use PBKDF2, bcrypt or scrypt for hashing.</p>
<p><strong>Authentication</strong></p>
<p>Web services authentication can be divided into 2 parts i.e. Client Authentication and Server Authentication. Authentication is the process of validating both communication parties are legitimate and are authorized entities to the system.</p>
<p>Client Authentication – This implies to the client or web browser or web service call accessing the system resource. Each web service call must be authenticated using a username/password combination or token or session identifier. To simplify the authentication process, the application could use a separate web service call to authenticate a user and issue a valid token (also called as bearer token) or session identifier. All subsequent web service call must then use the bearer token or session identifier. From this on, the web service security can be compared to web application security.</p>
<p>WS-Security offers use of username/password, X.509 certificates or Kerberos authentication mechanisms. The combination of username/password along with Digest Authentication is the preferred way to go.</p>
<p>Server Authentication – This implies to the server offering services to another application or users. TLS must be used to authenticate the server to the client. The client must verify the server certificate is issued by a trusted provider, is not expired, is not revoked, matches the domain name of the service, and that the server has proven that it has the private key associated with the public key certificate.</p>
<p><strong>Replay attacks</strong></p>
<p>A replay attack is a &ldquo;man-in-the-middle” type of attack where a message is intercepted and replayed by an attacker to impersonate the original sender. The replay attack can be tackled broadly in two ways:</p>
<p>-     Timestamp – A timestamp element is used along with web service call to keep track of messages and to detect replays of previous messages. This control must be implemented both at the client and server side. The server validates the timestamp token on each client request to the server cached timestamp.</p>
<p>-     Nonce – This control is provided by most of the IDEs to protect against replay attacks. Since Nonce element has a unique value, server can detect replay attacks with relative ease.</p>
<p>-     As a security best practice, both Nonce and timestamp can be used and must be signed by the IDE. Avoid using own algorithms or secret number generators instead use a IDE provided functionality to implement a Nonce.</p>
<p>The below table summarizes the above discussed methods.</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>Confidentiality</strong></th>
<th><strong>Integrity</strong></th>
<th><strong>Authentication</strong></th>
<th><strong>Replay  Attack</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>SOAP  based integration</td>
<td>Transport Layer Security and XML  Encryption</td>
<td>Transport Layer Security and XML  Digital Signature</td>
<td>OAuth 2.0 or Username-Password  with Digest Authentication</td>
<td>Nonce attached to user identifier</td>
</tr>
</tbody>
</table>
<p><strong>REST (REpresentational State Transfer)</strong></p>
<p>REST is a most popular application integration method for most of the companies today. Yahoo, Google, Flickr, Amazon uses REST web services over SOAP. The reason is flexibility, platform independence and requires less bandwidth than SOAP. REST is stateless, architectural style and best utilized with JSON output. The one most important advantage of using JSON output is the user input is rendered in TEXT format by web browser rather than the HTML format. This prevents the attacks such as cross site scripting inherently. However, the input validation rule still applies to REST web service that do not always trust the user input. Though REST relies heavily on the HTTP method to route and process endpoint requests and expects properly typed data hence the REST security must be considered when using the REST web service for application integration.</p>
<p><strong>Confidentiality</strong></p>
<p>REST is stateless and based on HTTP protocol. The confidentiality of data lies on transport layer security that is provided by HTTPS connection. By using TLS 1.2 and strong cipher e.g. SHA-256 with RSA encryption ensures that the communication is not brute-forcable. REST web services must be implemented over HTTPS connection for all user transaction calls, resource name and utilize POST request for transmitting user information. The POST request ensures that the HTTP request is not cached along the network path such as web browser, network proxy. The example of REST API includes.</p>
<p>GOOD:</p>
<p><a href="https://example.com/">https://example.com/</a><!-- raw HTML omitted -->/lists</p>
<p>BAD:</p>
<p><a href="https://example.com/">https://example.com/</a><!-- raw HTML omitted -->/action?apiKey=123456</p>
<p><strong>Integrity</strong></p>
<p>REST data integrity is provided by using digital signatures over TLS layer and strong input validation. The Validate in, Validate out concept applies to all application integration methods that guarantees API data integrity and also protects against attacks such as cross site scripting, XXE, XML denial of service. E.g. if API data is used as an input to another application the lack of data input validation could cause serious damages to another application.</p>
<p>Another way to ensure data integrity is message level encryption. The most common way to achieve is use of XML digital signatures with approved hashing algorithms such as PBKDF2, bcrypt or scrypt. This ensures that the data is not tampered while in transit preventing unauthorized modification of the data.</p>
<p><strong>Authentication</strong></p>
<p>The client or each REST API call must be authenticated before accessing any system resources. There are several methods by which authentication can be implemented i.e. Basic Authentication, Digest Authentication, OAuth1.0a or OAuth2.0. There are pros and cons of each authentication method and are best suited when applied using the combination of authentication techniques. Example, an application performs OAuth2 authentication based on IP whitelisting. This ensures system resources are accessed from known IP and OAuth2 ensures Authorization token is present for each API call.</p>
<p>Since REST is a stateless protocol, each API call requires a user to be tracked by some identifier e.g. Session Identifier or OAuth2 Token. The OAuth2.0 authentication is the recommended approach as there is no session information stored on the server, all is tracked via the OAuth token that must be set with an expiry time.</p>
<p>The other authentication methods include:</p>
<p>-     Basic Authentication - This is the easiest way to implement authentication and security. It is basic in nature and require no overhead of additional APIs. The username and password is sent in the request header in Base64 encoding format. This method must be used only with SSL/TLS security to prevent credentials being sniffed and decoded.</p>
<p>-     Digest Authentication – This is the secure way to implement authentication where user credentials are sent in encrypted format over the network. The client request a server to access the resource and the server responds with a realm (hash) and nonce asking for client to authenticate. The client authenticates using username and password that is sent along with nonce and realm to the server. If matches, server authenticates the client.</p>
<p>-     OAuth1.0a – This is a signature based protocol and has a overhead of complex signature generating process. The user credentials are passed through the cryptographic algorithm such as HMAC-SHA1 to generate a token secret or nonce. This token is then used for each REST API call for authentication and authorization.</p>
<p>-     OAuth2.0 – This protocol eliminates use of signatures instead the security lies on Transport Layer Security. The protocol uses token secret or nonce for each REST API call for authentication and authorization.</p>
<p><strong>Replay Attacks</strong></p>
<p>REST web services are more prone to replay attacks, especially when authentication is not implemented sufficiently on the APIs. By taking an advantage of REST being a stateless and language independent it is relatively very simple to replay the REST API call. Each REST API call should use a time limited encryption key, keyed against the session token or bearer token, date and time or IP address. The encryption key is sent along with bearer token via POST method that is then validated at the server end. This prevents the replay attack as the encryption key is attached to the local client storage and validated at the server end before processing the API call.</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>Confidentiality</strong></th>
<th><strong>Integrity</strong></th>
<th><strong>Authentication</strong></th>
<th><strong>Replay  Attack</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>REST  based integration</td>
<td>Transport Layer Security and  message level encryption</td>
<td>Transport Layer Security and  message level digital signature</td>
<td>OAuth 2.0 with token expiry  IP whitelisting</td>
<td>Encryption key or secret token attached to  user identifier</td>
</tr>
</tbody>
</table>
<p><strong>Message Based Integration</strong></p>
<p>Message Based Integration method is most commonly used in supplier-subscriber environment. For example, as an end user I want to be notified for any price change of a product, new offer published by supplier or special discounts running by supplier I will subscribe to the supplier website. With this pattern, many applications offering to subscribe users will use the Message based service of the supplier. When an event is created, the supplier sends this event to all the subscribers to the service notifying users of the subscriber.</p>
<p><strong>Confidentiality</strong></p>
<p>The Confidentiality of the data and communication lies on Transport Layer Security and Message encryption. Since Message based integration is platform independent it can use message encryption (WS-Security) or XML encryption as discussed above to achieve message confidentiality. The use of HTTPS ensures that the message is protected by eavesdropping and network level attacks and message level encryption ensures that the message is encrypted at rest providing data confidentiality.</p>
<p><strong>Integrity</strong></p>
<p>The integrity of the data and communication lies on digital signatures. The use of strong hashing algorithms and validating the computed value at the server prevents tampering of message in transit. Implementing digital signature over HTTPS prevent from network level attacks and using digital signature with approved hashing algorithms such as PBKDF2, bcrypt or scrypt prevent unauthorized modification of data. Ensure that the hashing value is validated at the server for each message call.</p>
<p><strong>Authentication</strong></p>
<p>Message Based Integration is no different than other web service offerings. The authentication methods that could be utilized includes Basic Authentication, Digest Authentication, Username/Password combination over HTTPS protocol. Ensure authentication method is always implemented on HTTPS layer. In cases where source application endpoints are known, IP whitelisting must be used to deter unauthorized access attempts to the web service.</p>
<p>For message based integration, Digest Authentication with IP whitelisting works in most cases as consumer applications are known and frequently requires access to known set of system resources.</p>
<p><strong>Replay Attack</strong></p>
<p>The API can be written in any of the language XML or SOAP-based. Implementing a time limited encryption key, keyed against the session token or bearer token, date and time or IP address prevents against the replay attacks. The encryption key is sent along with bearer token via POST method that is then validated at the server end.</p>
<table>
<thead>
<tr>
<th></th>
<th><strong>Confidentiality</strong></th>
<th><strong>Integrity</strong></th>
<th><strong>Authentication</strong></th>
<th><strong>Replay  Attack</strong></th>
</tr>
</thead>
<tbody>
<tr>
<td>Message  Based Integration</td>
<td>Transport Layer Security and  message level encryption</td>
<td>Transport Layer Security and  message level digital signature</td>
<td>Digest Authentication over HTTPS  IP whitelisting</td>
<td>Encryption key or secret token attached to  user identifier</td>
</tr>
</tbody>
</table>
]]></content>
        </item>
        
        <item>
            <title>Vulnerability Database for common security issues</title>
            <link>https://www.connectthoughts.com/posts/2013/07/vulnerability-database-for-common-security-issues/</link>
            <pubDate>Wed, 17 Jul 2013 23:53:00 +0100</pubDate>
            
            <guid>https://www.connectthoughts.com/posts/2013/07/vulnerability-database-for-common-security-issues/</guid>
            <description>Security Issues</description>
            <content type="html"><![CDATA[<p>Following are my notes on common security issues that were identified based vulnerability scanning or penetration testing</p>
<h1 id="os-command-injection">OS Command Injection</h1>
<p><strong>Description:</strong> An OS command injection attack occurs when an attacker attempts to execute system level commands through a vulnerable application. Application uses system level commands to do some functionality. In this, web interface is used to execute OS command on a web server. Any web interface that is not properly sanitized is subject to this exploit. If attackers can identify the vulnerable interface, they can inject crafted operating system commands through a vulnerable web interface in order to perform any desire actions.</p>
<p><strong>Risk:</strong> An attacker can execute OS commands from web application interface, upload malicious programs to the web server directory, cause denial of service, etc.</p>
<p><strong>Recommendation:</strong> Design and program the Web application to prevent client-supplied values from being treated as SQL syntax. By using stored procedures and parameterized SQL statements, it is possible to ensure that any client-supplied values used will be treated as an expression and will not be able to modify the SQL syntax. As a layered security approach, use white list input validation and output encoding on all user inputs.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/OS_Command_Injection">https://www.owasp.org/index.php/OS_Command_Injection</a></p>
<p><a href="https://www.owasp.org/index.php/Command_Injection">https://www.owasp.org/index.php/Command_Injection</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/78.html">http://cwe.mitre.org/data/definitions/78.html</a></p>
<p><a href="http://capec.mitre.org/data/definitions/88.html">http://capec.mitre.org/data/definitions/88.html</a></p>
<p><a href="http://blog.pusheax.com/2012/01/os-command-injection-vulnerabity.html">http://blog.pusheax.com/2012/01/os-command-injection-vulnerabity.html</a></p>
<h1 id="orm-injection">ORM Injection</h1>
<p><strong>Description:</strong> An ORM is an Object Relational Mapping tool. ORM Injection is an attack using SQL Injection against an ORM generated data access object model.</p>
<p>It is used to expedite object oriented development within the data access layer of software applications, including web applications. The benefits of using an ORM tool include quick generation of an object layer to communicate to a relational database, standardized code templates for these objects, and usually a set of safe functions to protect against SQL Injection attacks. ORM generated objects uses SQL to perform CRUD (Create, Read, Update, Delete) operations on a database. It is possible, however, for a web application using ORM generated objects to be vulnerable to SQL Injection attacks if methods accept non sanitized input parameters.</p>
<p><strong>Risk:</strong> An attacker can update, delete, modify and read sensitive data from the database using web application interface.</p>
<p><strong>Recommendation:</strong> Design and program the Web application to prevent client-supplied values from being treated as SQL syntax. By using stored procedures and parameterized SQL statements, it is possible to ensure that any client-supplied values used will be treated as an expression and will not be able to modify the SQL syntax. As a layered security approach, use white list input validation and output encoding on all user inputs.</p>
<p><strong>References:</strong></p>
<p><a href="http://capec.mitre.org/data/definitions/109.html">http://capec.mitre.org/data/definitions/109.html</a></p>
<p><a href="http://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate">http://software-security.sans.org/developer-how-to/fix-sql-injection-in-java-hibernate</a></p>
<p><a href="http://www.12robots.com/index.cfm/2009/11/19/ORM-Hibernate-Injection--Security-Series-14">http://www.12robots.com/index.cfm/2009/11/19/ORM-Hibernate-Injection--Security-Series-14</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Object_Relational_Mapping_Injection">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Object_Relational_Mapping_Injection</a></p>
<p><a href="http://stackoverflow.com/questions/5173002/where-are-orms-vulnerable-for-sql-injection">http://stackoverflow.com/questions/5173002/where-are-orms-vulnerable-for-sql-injection</a></p>
<h1 id="xml-injection">XML Injection</h1>
<p><strong>Description:</strong> XML Injection is used to manipulate or compromise the logic of an XML application or service. The injection of unintended XML content and/or structures into an XML message can alter the intend logic of the application. Further, XML injection can cause the insertion of malicious content into the resulting message/document.</p>
<p><strong>Risk:</strong> An attacker can bypass backend access control, execute backend database queries, make arbitrary HTTP requests which can be used to exhaust server resources (denial of service), perform privilege escalation, etc.</p>
<p><strong>Recommendation:</strong> Design and program the Web application to prevent client-supplied values from being treated as SQL syntax. By using stored procedures and parameterized SQL statements, it is possible to ensure that any client-supplied values used will be treated as an expression and will not be able to modify the SQL syntax. As a layered security approach, use white list input validation and output encoding on all user inputs.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing">https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/91.html">http://cwe.mitre.org/data/definitions/91.html</a></p>
<p>[http://projects.webappsec.org/w/page/13247004/XML%20Injection](<a href="http://projects.webappsec.org/w/page/13247004/XML">http://projects.webappsec.org/w/page/13247004/XML</a> Injection)</p>
<p><a href="https://www.htbridge.com/vulnerability/xml-injection.html">https://www.htbridge.com/vulnerability/xml-injection.html</a></p>
<h1 id="xpath-injection">XPath Injection</h1>
<p><strong>Description:</strong> XPath Injection is an attack technique used to exploit applications that construct XPath (XML Path Language) queries from user-supplied input to query or navigate XML documents. It can be used directly by an application to query an XML document.</p>
<p>Querying XML is done with XPath, a type of simple descriptive statement that allows the XML query to locate a piece of information. Like SQL, you can specify certain attributes to find, and patterns to match. By sending intentionally malformed information into the web site, an attacker can find out how the XML data is structured, or access data that he may not normally have access to.</p>
<p><strong>Risk:</strong> An attacker can update, delete, modify and read sensitive data from the database using web application interface.</p>
<p><strong>Recommendation:</strong> Design and program the Web application to prevent client-supplied values from being treated as SQL syntax. By using stored procedures and parameterized SQL statements, it is possible to ensure that any client-supplied values used will be treated as an expression and will not be able to modify the SQL syntax. As a layered security approach, use white list input validation and output encoding on all user inputs.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/XPATH_Injection">https://www.owasp.org/index.php/XPATH_Injection</a></p>
<p><a href="https://www.owasp.org/index.php/Blind_XPath_Injection">https://www.owasp.org/index.php/Blind_XPath_Injection</a></p>
<p><a href="http://www.soapui.org/Security/xpath-injection.html">http://www.soapui.org/Security/xpath-injection.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/91.html">http://cwe.mitre.org/data/definitions/91.html</a></p>
<h1 id="imapsmtp-injection">IMAP/SMTP Injection</h1>
<p><strong>Description:</strong> IMAP/SMTP is a protocol that allows an email client to download email from an email server. It is used for exchange for the mails between mail server and client.</p>
<p>IMAP/SMTP injection is possible when webmail server sit between the Internet and the IMAP or SMTP mail server and webmail doesn’t validate input from the user. An attacker can exploits weaknesses in input validation on IMAP/SMTP servers to execute commands on the server. User requests are received by the webmail servers which then query the back-end mail server for the requested information and return this response to the user. In this attack, mail-server commands are embedded in parts of the request sent to the web-mail server. If the web-mail server fails to adequately sanitize these requests, these commands are then sent to the back-end mail server when it is queried by the web-mail server, where the commands are then executed. This attack can be especially dangerous since administrators may assume that the back-end server is protected against direct Internet access and therefore may not secure it adequately against the execution of malicious commands.</p>
<p><strong>Risk:</strong> An attacker can exploit vulnerabilities in the IMAP/SMTP servers and evading all the restrictions at the application layer.</p>
<p><strong>Recommendation:</strong> Ensure your mail server is security hardened and running latest updated OS and patches. As a layered security approach, perform white list input validation and output encoding on all user inputs.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OWASP-DV-011)">https://www.owasp.org/index.php/Testing_for_IMAP/SMTP_Injection_(OWASP-DV-011)</a></p>
<p><a href="http://capec.mitre.org/data/definitions/183.html">http://capec.mitre.org/data/definitions/183.html</a></p>
<p><a href="http://software-security.sans.org/blog/2011/01/14/spot-vuln-sleep-smtp-command-injection">http://software-security.sans.org/blog/2011/01/14/spot-vuln-sleep-smtp-command-injection</a></p>
<p><a href="https://www.hellboundhackers.org/articles/867-smtp-injection.html">https://www.hellboundhackers.org/articles/867-smtp-injection.html</a></p>
<p><a href="http://www.websiterepairs.net/smtpinjection.php">http://www.websiterepairs.net/smtpinjection.php</a></p>
<h1 id="user-enumeration">User Enumeration</h1>
<p><strong>Description:</strong> User enumeration is possible using a built in function within the application. The system responds with different messages depending on whether valid account information is used.</p>
<p><strong>Risk:</strong> By responding with different error messages depending on whether valid account information has been entered, a remote attacker will be able to determine valid email information.</p>
<p><strong>Recommendation:</strong> The application should not provide specific details as to the existence of valid account information, such as when a user attempts to obtain a forgotten password. The application should not provide specific details regarding the validity of information entered. Non-descriptive error messages should be used, such as “Credentials are Not Valid or your account has been locked out due to excessive, incorrect logins. If the problem persists, please contact customer service.”</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_(OWASP-AT-002)">https://www.owasp.org/index.php/Testing_for_User_Enumeration_and_Guessable_User_Account_(OWASP-AT-002)</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/204.html">http://cwe.mitre.org/data/definitions/204.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/203.html">http://cwe.mitre.org/data/definitions/203.html</a></p>
<p><a href="http://www.gnucitizen.org/blog/username-enumeration-vulnerabilities/">http://www.gnucitizen.org/blog/username-enumeration-vulnerabilities/</a></p>
<h1 id="default-credentials-enabled">Default credentials Enabled</h1>
<p><strong>Description:</strong> Application makes use of popular open source or commercial software that can be installed on servers with minimal configuration or customization by the server administrator. Moreover, a lot of hardware appliances (i.e. network routers and database servers), offer web-based configuration or administrative interfaces.</p>
<p>Often these applications, once installed, are not properly configured and the default credentials provided for initial authentication and configuration are never changed. These default credentials are well known by attackers, who can use them to gain administrative access to the application.</p>
<p>Furthermore, in many situations, when a new account is created on an application, a default password (with some standard characteristics) is generated. If this password is predictable and the user does not change it on the first access, this can lead an attacker to gain unauthorized access to the application.</p>
<p><strong>Risk:</strong> An attacker can gain administrative access to the application performing actions on restricted menu, restricted data and also escalates his privilege to other level of users.</p>
<p><strong>Recommendation:</strong> Review, audit and remove application default accounts or credentials. Ensure to remove all default accounts from related application modules.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)">https://www.owasp.org/index.php/Testing_for_Default_or_Guessable_User_Account_(OWASP-AT-003)</a></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_default_credentials_(OWASP-AT-003)">https://www.owasp.org/index.php/Testing_for_default_credentials_(OWASP-AT-003)</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/521.html">http://cwe.mitre.org/data/definitions/521.html</a></p>
<h1 id="weak-password-policy">Weak Password Policy</h1>
<p><strong>Description:</strong> It was observed that the application adopts weak password policy. Application allows users to set 1 character password and do not force change password on first login. Lack of password complexity significantly reduces the search space when trying to guess user&rsquo;s passwords, making brute-force attacks easier.</p>
<p><strong>Risk:</strong> An attacker can perform brute force attack to compromise weak user’s credentials and obtain access to restricted area.</p>
<p><strong>Recommendation:</strong> Enforce a strong password policy across the application. The policy should include below points:</p>
<p>·     Must be minimum 8-characters in length</p>
<p>·     Must be alpha-numeric</p>
<p>·     Password History: 5</p>
<p>·     Must expire within 90 days</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OWASP-AT-008)">https://www.owasp.org/index.php/Testing_for_Weak_password_policy_(OWASP-AT-008)</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/521.html">http://cwe.mitre.org/data/definitions/521.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/522.html">http://cwe.mitre.org/data/definitions/522.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/263.html">http://cwe.mitre.org/data/definitions/263.html</a></p>
<h1 id="captcha-not-implemented">CAPTCHA Not Implemented</h1>
<p><strong>Description:</strong> The application has a registration feature. This process adopts an insecure practice by not verifying that the end user is an automated program or a legitimate user. An attacker can cause denial of service attack by constructing a custom script called bot to register millions of users within no time. This event may flood the network which can lead to DOS attack.</p>
<p><strong>Risk:</strong> The risk is high as it may affect the availability of the application.</p>
<p><strong>Recommendation:</strong> Implement a CAPTCHA to stop automated programs in their tracks.</p>
<p>A CAPTCHA, however, cannot be bypassed by automated tools and so is a better method. A CAPTCHA (an acronym for &ldquo;Completely Automated Public Turing test to tell Computers and Humans Apart&rdquo;, trademarked by Carnegie Mellon University) is a type of challenge-response test used in computing to determine whether or not the user is human. One of the implementations includes visual CAPTCHAs which require users to identify the word that is embedded in a picture format in the webpage and enter the same into a textbox for verification. This would prevent bots and other malicious scripts from brute forcing the application or launching denial of service attacks on the application in public registration forms.</p>
<p>For a safe implementation, the application should generate a dynamic image and send to the client with a random token. In response, server checks the token and returned characters from the client. If matches, request is valid. Expire token after one use.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Captcha_(OWASP-AT-008)">https://www.owasp.org/index.php/Testing_for_Captcha_(OWASP-AT-008)</a></p>
<p><a href="https://www.idontplaydarts.com/2011/05/exploit-phpcaptcha-securimage/">https://www.idontplaydarts.com/2011/05/exploit-phpcaptcha-securimage/</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/804.html">http://cwe.mitre.org/data/definitions/804.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/330.html">http://cwe.mitre.org/data/definitions/330.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/287.html">http://cwe.mitre.org/data/definitions/287.html</a></p>
<h1 id="information-exposure-through-browser-caching">Information Exposure through Browser Caching</h1>
<p><strong>Description:</strong> Application stores certain information in the web browser cache so if there is another request for the same URL, it can use the response that it has, instead of asking the origin server for it again. Main reason to use web cache is to reduce latency and to reduce network traffic. Cache policy of the application specifies the extent to which the page and its form field should be cached.</p>
<p>On the negative side if the cached information contains sensitive data is a security concern. This information need to be protected from unwanted systems/users, hence each web pages need to classified and caching sensitive information need to be avoided.</p>
<p>Information exposure is possible if browsers store information in a client-side cache, which can leave behind sensitive information for other users to find and exploit, such as passwords or credit card numbers.</p>
<p><strong>Risk:</strong> An attacker can steal sensitive information from browser cache affecting user confidentiality by exposing sensitive and personal information of the user.</p>
<p><strong>Recommendation:</strong> Caching can be prevented by setting the proper cache control attributes in the response header.</p>
<p>Cache-control: no cache</p>
<p>Cache-control: no store</p>
<p>The first attribute tells the browser not to use the information that is cached for that particular request-response pair. It indicates that the browser must send the request to the server each time. No-cache can also be specified for certain fields alone, in which case the rest of the page may be displayed from cache. If no field is specified, the no part of the page can be displayed from cache.</p>
<p>No-store indicates that no part of the request-response pair should be cached. This applies to the entire page and the browser should not remember any part of it in its cache</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/525.html">http://cwe.mitre.org/data/definitions/525.html</a></p>
<p><a href="http://www.symantec.com/connect/blogs/using-browser-cache-bypass-security">http://www.symantec.com/connect/blogs/using-browser-cache-bypass-security</a></p>
<p><a href="https://www.owasp.org/index.php/OWASP_Application_Security_FAQ">https://www.owasp.org/index.php/OWASP_Application_Security_FAQ</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Information_Leak_Through_Browser_Caching">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Information_Leak_Through_Browser_Caching</a></p>
<p><a href="http://www.jamesewelch.com/2011/07/12/securing-asp-net-web-sites-form-caching/">http://www.jamesewelch.com/2011/07/12/securing-asp-net-web-sites-form-caching/</a></p>
<h1 id="direct-urlimproper-authorization-control">Direct URL/Improper authorization control</h1>
<p><strong>Description:</strong> It was observed that the application internal pages are accessible without authentication. A valid login is not required to exploit the vulnerability.</p>
<p><strong>Risk:</strong> An attacker can access internal application pages without authentication breaching user confidentiality and integrity. Depending on access privileges, attacker can perform actions on restricted menu, restricted data and also escalates his privilege to other level of users.</p>
<p><strong>Recommendation:</strong> In web application always try to distinguish users and their roles. If a page is only made for admin, then check whether the user is admin before granting access to the page or user has permission to access the page. This makes it secure and protects URL based forced browsing attack. Ensure authentication loop is enabled for every internal page.</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/285.html">http://cwe.mitre.org/data/definitions/285.html</a></p>
<p><a href="http://www.cvedetails.com/cwe-details/285/Improper-Access-Control-Authorization-.html">http://www.cvedetails.com/cwe-details/285/Improper-Access-Control-Authorization-.html</a></p>
<p><a href="https://www.owasp.org/index.php/Top_10_2010-A8-Failure_to_Restrict_URL_Access">https://www.owasp.org/index.php/Top_10_2010-A8-Failure_to_Restrict_URL_Access</a></p>
<h1 id="malicious-file-upload">Malicious File Upload</h1>
<p><strong>Description:</strong> Uploaded files represent a significant risk to applications. The first step in many attacks is to get some code to the system to be attacked. Then the attack only needs to find a way to get the code executed. Using a file upload helps the attacker accomplish the first step. In this case, we successfully managed to upload and execute HTML and EXE file to the web server.</p>
<p><strong>Risk:</strong> The consequences of unrestricted file upload can vary, including complete system takeover, an overloaded file system, forwarding attacks to backend systems, and simple defacement. It depends on what the application does with the uploaded file, including where it is stored.</p>
<p><strong>Recommendation:</strong> The files should be accepted by creating a white list of file type and applying a validation at application layer on server side. Every file must be checked for valid file type, maximum content length and content type before it is finally uploaded to the server.</p>
<p>The characters such as %00, 0X00, :, ;, $, _, &gt;, &lt;, /, \ need to be validated at application layer before uploading a file to the server.</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/434.html">http://cwe.mitre.org/data/definitions/434.html</a></p>
<p><a href="http://resources.infosecinstitute.com/file-upload-vulnerabilities/">http://resources.infosecinstitute.com/file-upload-vulnerabilities/</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Unrestricted_File_Upload">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Unrestricted_File_Upload</a></p>
<p><a href="https://www.owasp.org/index.php/Unrestricted_File_Upload">https://www.owasp.org/index.php/Unrestricted_File_Upload</a></p>
<h1 id="session-hijacking">Session Hijacking</h1>
<p><strong>Description:</strong> The vulnerability allows an attacker to hijack another user’s session by just replaying the cookie of another user. An attacker gains a prolonged access to user’s session as application do not terminate the session on server side and no session expiry tags has been maintained by the application.</p>
<p><strong>Risk:</strong> An attacker can hijack sessions of another user gaining access to unauthorized contents.</p>
<p><strong>Recommendation:</strong> Invalidate any existing session identifiers prior to authorizing a new user session and renew the cookies after successful authentication. Attach a session cookie with an expiry tag.</p>
<p><strong>References:</strong></p>
<p><a href="http://en.wikipedia.org/wiki/Session_hijacking">http://en.wikipedia.org/wiki/Session_hijacking</a></p>
<p><a href="https://www.owasp.org/index.php/Session_hijacking_attack">https://www.owasp.org/index.php/Session_hijacking_attack</a></p>
<p><a href="http://technet.microsoft.com/en-us/magazine/2005.01.sessionhijacking.aspx">http://technet.microsoft.com/en-us/magazine/2005.01.sessionhijacking.aspx</a></p>
<p><a href="http://msujaws.wordpress.com/2011/02/17/xss-session-hijacking-proof-of-concept/">http://msujaws.wordpress.com/2011/02/17/xss-session-hijacking-proof-of-concept/</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/384.html">http://cwe.mitre.org/data/definitions/384.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/331.html">http://cwe.mitre.org/data/definitions/331.html</a></p>
<h1 id="insecure-direct-object-references---parameter-manipulation">Insecure Direct Object References - Parameter Manipulation</h1>
<p><strong>Description:</strong> Application allows users to browse books, purchase books, view order status of books, etc. Due to improper mapping of user privilege role and request parameters, an adversary is able to execute action that he is not authorized to perform. Using this vulnerability, an adversary can view actions on behalf of other users.</p>
<p><strong>Risk:</strong> An adversary gains unauthorized access to restricted menu, restricted data, restricted action, and also escalates his privilege to other level of users</p>
<p><strong>Recommendation:</strong> When the application receives any request from the client then server should not process the request as-it-is and prepare a response. On receiving any request from any user, application should check if the request submitted by user is according to the access rights assigned to the user. It is recommended that the Session ID of the logged in user should be mapped to the user details, user’s privileges, user’s actions or any other constant parameters and this should be verified before serving any request.</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/472.html">http://cwe.mitre.org/data/definitions/472.html</a></p>
<p><a href="http://www.security-database.com/cwe.php?name=CWE-472">http://www.security-database.com/cwe.php?name=CWE-472</a></p>
<p><a href="https://www.owasp.org/index.php/Web_Parameter_Tampering">https://www.owasp.org/index.php/Web_Parameter_Tampering</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Web_Parameter_Tampering">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Web_Parameter_Tampering</a></p>
<h1 id="improper-error-handling">Improper Error Handling</h1>
<p><strong>Description:</strong> Often, inducing errors in application results in dangerous information disclosure like stack traces, failed SQL statements, server/back-end technology banners with versions, web-server path information, user enumeration, or other debugging information. Some of these errors even expose functions that produce different results based upon different user-inputs, to the attacker. An attacker can leverage the information learnt from such error messages about the configuration and internal workings of the application to launch manual or even automated attacks focused on the technologies/functionalities being used.</p>
<p><strong>Risk:</strong> Informative error messages can lead to loss in confidentiality with varying severity depending upon the information revealed, and aid an attacker to mount more powerful technology/functionality-specific attacks upon the application/web-server.</p>
<p><strong>Recommendation:</strong> Ensure that only generic, customized error messages which do not reveal any sensitive information are displayed to the user.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Improper_error_handling">https://www.owasp.org/index.php/Improper_error_handling</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/388.html">http://cwe.mitre.org/data/definitions/388.html</a></p>
<p><a href="http://www.jtmelton.com/2010/06/02/the-owasp-top-ten-and-esapi-part-7-information-leakage-and-improper-error-handling/">http://www.jtmelton.com/2010/06/02/the-owasp-top-ten-and-esapi-part-7-information-leakage-and-improper-error-handling/</a></p>
<p><a href="http://searchsecurity.techtarget.com/tip/Improper-error-handling">http://searchsecurity.techtarget.com/tip/Improper-error-handling</a></p>
<h1 id="insecure-cryptographic-storage">Insecure Cryptographic Storage</h1>
<p><strong>Description:</strong> Application developers should identify the data handled by the application which are sensitive enough to be encrypted properly where they are being stored. Ex: Passwords, credit cards, health records, and personal information. A strong, standard encryption algorithm should be used along with a strong key which is protected from unauthorized access. In many cases, these sensitive data are not encrypted, or the encryption process is sabotaged through unsafe key generation and storage, not rotating keys, and weak algorithm usage. The use of weak or unsalted hashes to protect passwords is also prevalent.</p>
<p><strong>Risk:</strong> Sensitive data like credit card, passwords, health records, etc., when stored unencrypted, or protected with unsalted hash are prone to unauthorized disclosure through the exploitation of other vulnerabilities like SQL injection, direct object access, etc. Such leakage will result in the loss of confidentiality, privacy and trust of users, damage to reputation, and legal liabilities.</p>
<p><strong>Recommendation:</strong> Identify and encrypt all sensitive data with standard, strong algorithms and strong keys wherever they are being stored, including offsite backups. Ensure passwords are hashed with a strong standard algorithm and an appropriate salt is used.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Top_10_2010-A7-Insecure_Cryptographic_Storage">https://www.owasp.org/index.php/Top_10_2010-A7-Insecure_Cryptographic_Storage</a></p>
<p><a href="https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project">https://www.owasp.org/index.php/Category:OWASP_Top_Ten_Project</a></p>
<p><a href="http://www.infosecisland.com/blogview/21796-Insecure-Cryptographic-Storage-Explained.html">http://www.infosecisland.com/blogview/21796-Insecure-Cryptographic-Storage-Explained.html</a></p>
<p><a href="http://www.veracode.com/security/insecure-crypto">http://www.veracode.com/security/insecure-crypto</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/326.html">http://cwe.mitre.org/data/definitions/326.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/816.html">http://cwe.mitre.org/data/definitions/816.html</a></p>
<h1 id="directory-listing">Directory listing</h1>
<p><strong>Description:</strong> Directory listings were found enabled on the Web server. Directory listings are a complete index of all of the resources located in a directory. These directories may store documents or files critical to the Web server. The information in these folders is most likely meant to be private.</p>
<p><strong>Risk:</strong> Directory listings are valuable to attackers because they display all files in a directory, not just ones that are intended to be used. Files that are supposed to be hidden (such as data files, backed-up source code or applications in development) may be visible.</p>
<p><strong>Recommendation:</strong> If the files in a directory need to be listed for Web users, create an HTML page to display them. Turn off automatic directory listings and remove sample/unwanted files from the document root entirely where possible.</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/548.html">http://cwe.mitre.org/data/definitions/548.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/538.html">http://cwe.mitre.org/data/definitions/538.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/23.html">http://cwe.mitre.org/data/definitions/23.html</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Information_Leak_Through_Directory_Listing">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Information_Leak_Through_Directory_Listing</a></p>
<p><a href="https://www.owasp.org/index.php/Top_10_2010-A6-Security_Misconfiguration">https://www.owasp.org/index.php/Top_10_2010-A6-Security_Misconfiguration</a></p>
<h1 id="privilege-escalation">Privilege Escalation</h1>
<p><strong>Description:</strong> Privilege escalation occurs when a user gets access to more resources or functionality than they are normally allowed, and such elevation/changes should have been prevented by the application. It was observed that the application allows lower privileged user to view records of higher privileged user. In this case, employee role user is able to change its role to administrator and able to perform admin actions.</p>
<p><strong>Risk:</strong> An attacker gains unauthorized access to restricted file, restricted data, restricted action, and also escalates his privilege to other level of users.</p>
<p><strong>Recommendation</strong>: It is recommended to adopt below approach to fix the vulnerability:</p>
<p>·     Implement role based access control to assign permissions to application users for vertical access control requirements.</p>
<p>·     Implement data-contextual access control to assign permissions to application users in the context of specific data items for horizontal access control requirements.</p>
<p>·     Avoid assigning permissions on a per-user basis</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OWASP-AZ-003)">https://www.owasp.org/index.php/Testing_for_Privilege_escalation_(OWASP-AZ-003)</a></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Authorization">https://www.owasp.org/index.php/Testing_for_Authorization</a></p>
<p><a href="http://en.wikipedia.org/wiki/Privilege_escalation">http://en.wikipedia.org/wiki/Privilege_escalation</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/269.html">http://cwe.mitre.org/data/definitions/269.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/264.html">http://cwe.mitre.org/data/definitions/264.html</a></p>
<p><a href="http://cwe.mitre.org/data/definitions/272.html">http://cwe.mitre.org/data/definitions/272.html</a></p>
<h1 id="http-parameter-pollution">HTTP Parameter Pollution</h1>
<p><strong>Description:</strong> HTTP Parameter Pollution (H.P.P.) is an attack which targets the handling of single/multiple instances of an existing/new parameter by various server-side web technologies. Since there is no formal definition of how these parameters should be handled, different web servers handle them differently, rendering applications vulnerable to context-based attacks that vary in scope depending upon the functionality exposed by the attack-surface. In many instances, the execution of a successful H.P.P. attack depends on an understanding of the application logic and its attack-surfaces.</p>
<p><strong>Risk:</strong> An attacker can alter or modify the normal application behavior, access and potentially exploit variables that are not been controlled properly, bypass WAFs rules or input validation mechanisms using concatenation of values in multiple occurrences of the same parameter.</p>
<p><strong>Recommendation:</strong> It is recommended to perform URL encoding, input validation using white list and use strict regular expressions in URL rewriting to prevent HPP attack.</p>
<p><strong>References:</strong></p>
<p><a href="http://cwe.mitre.org/data/definitions/235.html">http://cwe.mitre.org/data/definitions/235.html</a></p>
<p><a href="http://www.acunetix.com/blog/whitepaper-http-parameter-pollution/">http://www.acunetix.com/blog/whitepaper-http-parameter-pollution/</a></p>
<p><a href="http://www.securitytube.net/video/278">http://www.securitytube.net/video/278</a></p>
<p><a href="http://capec.mitre.org/data/definitions/460.html">http://capec.mitre.org/data/definitions/460.html</a></p>
<p><a href="http://www.imperva.com/resources/glossary/http_parameter_pollution_hpp.html">http://www.imperva.com/resources/glossary/http_parameter_pollution_hpp.html</a></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OWASP-DV-004)">https://www.owasp.org/index.php/Testing_for_HTTP_Parameter_pollution_(OWASP-DV-004)</a></p>
<h1 id="http-response-splitting">HTTP Response Splitting</h1>
<p><strong>Description:</strong> HTTP Response splitting happens when a lack of input sanitization which allows an intruder to insert CR and LF characters into the headers of the application response and to &lsquo;split&rsquo; that answer into two different HTTP messages. First HTTP message is a request which is partially controlled by attacker and second one is a response.</p>
<p><strong>Risk:</strong> An attacker can perform cross site scripting and CSRF on the victim browser by sending script or malicious payload in the header.</p>
<p><strong>Recommendation:</strong> Use server side validation and disallow CRLF characters in all requests where user input is reflected in the response header.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/HTTP_Response_Splitting">https://www.owasp.org/index.php/HTTP_Response_Splitting</a></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_HTTP_Splitting/Smuggling_(OWASP-DV-016)">https://www.owasp.org/index.php/Testing_for_HTTP_Splitting/Smuggling_(OWASP-DV-016)</a></p>
<p><a href="http://en.wikipedia.org/wiki/HTTP_response_splitting">http://en.wikipedia.org/wiki/HTTP_response_splitting</a></p>
<p><a href="http://www.acunetix.com/websitesecurity/crlf-injection/">http://www.acunetix.com/websitesecurity/crlf-injection/</a></p>
<p><a href="http://www.acunetix.com/vulnerabilities/crlf-injectionhttp-respon/">http://www.acunetix.com/vulnerabilities/crlf-injectionhttp-respon/</a></p>
<h1 id="cross-site-flashing">Cross Site Flashing</h1>
<p><strong>Description:</strong> The vulnerability relates to executing a Flash document that passes commands or calls to a Flash player browser plugin. The vulnerability takes advantage of the fact that Flash files can reference external URLs.</p>
<p><strong>Risk:</strong> An attacker may steal user&rsquo;s session identifiers, force install malware/trojan using flash components on user’s machine.</p>
<p><strong>Recommendation:</strong> It is recommended to review the domains which are allowed by the Flash cross-domain policy and determine whether it is appropriate for the application to fully trust both the intentions and security posture of those domains.</p>
<p><strong>References:</strong></p>
<p><a href="https://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OWASP-DV-004)">https://www.owasp.org/index.php/Testing_for_Cross_site_flashing_(OWASP-DV-004)</a></p>
<p><a href="http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Cross-Site_Flashing">http://minsky.gsi.dit.upm.es/semanticwiki/index.php/Cross-Site_Flashing</a></p>
<p><a href="http://kb2.adobe.com/cps/142/tn_14213.html">http://kb2.adobe.com/cps/142/tn_14213.html</a></p>
<p><a href="http://capec.mitre.org/data/definitions/178.html">http://capec.mitre.org/data/definitions/178.html</a></p>
<p><a href="http://erlend.oftedal.no/blog/?blogid=99">http://erlend.oftedal.no/blog/?blogid=99</a></p>
]]></content>
        </item>
        
    </channel>
</rss>
